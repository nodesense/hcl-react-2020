import {createStore,
        combineReducers, 
        applyMiddleware} from 'redux';
        
import { createLogger } from 'redux-logger'

const logger = createLogger({});

console.log('redux starter');

//action-types.js
// constants, action type strings used in projects
// every action type should be unique in the application
// best pratice : MODULE/Action
// example/conventions
//                /counter/increment
//                [counter increment]
//                COUNTER.INCREMENT

export const INCREMENT = '[counter increment]';
export const DECREMENT = '[counter decrement]';
export const RESET     = '[counter reset]';

//actions.js
// write your action creators
// action creaters are helper function
// create and return action objects

// es5
export function increment(value) {
    return { // return a new object
        type: INCREMENT,
        payload: {value: value} // OR {value}
    }
}
// es6/ single line, without return statement
export const decrement = (value) => ({ // new object
        type: DECREMENT, // type is keyword
        payload: {value} // payload is conventional
})
//no payload
export const reset = () => ({type: RESET})

//counterReducer.js
//reducers
//TODO: import all action types here


// reducer, pure function
// called by dispatch method, two arguments
// state - inside store
// action - via dispatch(active)
const INITIAL_STATE = 0; // state can be any type/array/string/number/boolean/object
// very first time, state is undefined, we initialize with 0
//es5
export function counterReducer(state = INITIAL_STATE, 
                               action) {
    console.log('counterReducer called', state, action);
    switch(action.type) {
        case INCREMENT: 
                return state + action.payload.value;
        case DECREMENT:
                return state + action.payload.value;
        case RESET:
                return INITIAL_STATE
        default:
                return state;
    }
}


//cartReducer.js
export const cartReducer = (state = {}, action) => {
    console.log('cartReducer called', state, action)
    switch(action.type) {
        default:
            return state;
    }
}


//loggerMiddleware.js
// log every action dispatched in the console
// es5
function loggerMiddleware(store) {
    // called once during store creation
    // next is a function to forward action to next middlewares/reducers
    return function(next) {
        // called once during store creation
        // action is passed via dispatch
        return function(action) {
            // called once during every dispatch
            console.log('LOGGER ', action);
            // forward to next middleware/reducers
            const result = next(action);
            // result is returned by dispatcher
            // in general the same action object
            console.log('result', result)
            return result; 
        }
    }
}

// one line equalant of above middleware
// const loggerMiddlware = store => next => action => next(action)


// cacheMiddleware.js
// es6

export const cacheMiddleware = (store) => next => action => {
    console.log('cacheMiddlware', action);
    const result = next(action)
    if (typeof action === 'object' && action.type.indexOf('[counter') >= 0) {
        const state = store.getState(); // {counter: 0, cartItems: {}}
        // store only counter to local storage
        window.localStorage.setItem('counter', state.counter);
    }

    return result;
}



//store.js

// creat and configure the store, middlewares etc
// create store object {getState, dispatch, subscribe,...}


// counterReducer is invoked automaticall with
// undefiend state, with specifical action
// createStore always accept ONLY ONE reducer
// use combineReducers which will be useful to add/scale
// more reducers

// rootReducer, collection of reducers in key/value format
const rootReducer = combineReducers({
    //state name: reducer function for that state
    // state --> passed into corresponding reducer
    // one --> one
    counter: counterReducer,
    cartItems: cartReducer,
     // as many reducers...
})

// getState() ==> {counter: 0, cartItems: []}

// intitial state for store
const initalState = {
    counter: 100, // state name should be same as combinereducer key
    cartItems: { items: [ {id: 1}] }
    // if not assigned here, then it takes reducer function
}

// createStore(counterReducer)

const store = createStore(rootReducer, 
                          initalState,
                          applyMiddleware(logger,
                                          loggerMiddleware, 
                                          cacheMiddleware));

//store apis
console.log('STATE ', store.getState(), 'type ', typeof store.getState());

// manual action creation, 
const action = {
    type: INCREMENT,
    payload: {value: 5}
}
// dispatch will call reducer with last known state, action
console.log('DISPATCH', action)
// it calls all the reducers
// it can be 1 reducer or 100 or 1000 it calls all the reducers
// NEVER EVER try to optimize that
// every reducer has got default
store.dispatch(action);

console.log('STATE', store.getState());

// create action using action creator - helpers

store.dispatch(increment(2)); // easy
console.log('STATE', store.getState());
